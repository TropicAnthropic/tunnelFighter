// Tunnel Fighter
// Version 1.00
// March 26th 24 - April 2nd 24
// Matthew Bryan

#include <Arduboy2.h>
#include <ArduboyTones.h>
Arduboy2 arduboy;
Sprites sprites;
ArduboyTones sound(arduboy.audio.enabled);

// Bitmaps

const uint8_t PROGMEM titleScreen[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x82, 0x92, 0x92, 0x00, 0x80, 0x96, 0x96, 0x06, 0x06, 0xfe, 0xfe, 0x06, 0x96, 0x16, 0x16, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x80, 0x80, 0x02, 0x02, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0xfe, 0xfe, 0xc0, 0x90, 0x10, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0xfe, 0xfe, 0xc0, 0x82, 0x02, 0x02, 0x82, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xd6, 0x06, 0x06, 0x16, 0x06, 0x16, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x82, 0x02, 0x90, 0x80, 0x80, 0x80, 0x90, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x12, 0x92, 0x12, 0x92, 0x90, 0x80, 0x82, 0x82, 0x82, 0x82, 0x02, 0x80, 0x82, 0x80, 0x00, 0x02, 0x02, 0x02, 0x12, 0x10, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x02, 0x82, 0x82, 0x82, 0x80, 0x82, 0x80, 0x82, 0x02, 0x82, 0x82, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x20, 0x20, 0x00, 0x00, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3f, 0x3f, 0x00, 0x00, 0x3f, 0x3f, 0x00, 0x21, 0x23, 0x06, 0x0c, 0x18, 0x3f, 0x3f, 0x00, 0x00, 0x3f, 0x3f, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x3f, 0x3f, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x34, 0x34, 0x30, 0x30, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x34, 0x34, 0x34, 0x30, 0x04, 0x00, 0x00, 0x20, 0x20, 0x04, 0x04, 0x20, 0x24, 0x24, 0x00, 0x04, 0x04, 0x04, 0x24, 0x20, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x41, 0x40, 0x00, 0x01, 0x01, 0x48, 0x08, 0x08, 0x40, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x63, 0x63, 0x03, 0x03, 0x03, 0x0b, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x03, 0x43, 0x43, 0x03, 0x83, 0x83, 0x8f, 0x8f, 0x00, 0x00, 0xff, 0xff, 0x60, 0x61, 0x60, 0x61, 0x61, 0x60, 0xff, 0xff, 0x00, 0x40, 0x43, 0x43, 0x03, 0x03, 0xff, 0xff, 0x03, 0x0b, 0x03, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x63, 0x63, 0x63, 0x03, 0x03, 0x03, 0x43, 0x43, 0x00, 0x00, 0xff, 0xff, 0x63, 0x63, 0xeb, 0xeb, 0x63, 0x63, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x01, 0x09, 0x01, 0x49, 0x49, 0x48, 0x08, 0x00, 0x00, 0x08, 0x48, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x48, 0x48, 0x00, 0x00, 0x40, 0x41, 0x41, 0x41, 0x41, 0x09, 0x49, 0x09, 0x41, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x10, 0x12, 0x10, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x1f, 0x1f, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x10, 0x11, 0x13, 0x06, 0x0c, 0x18, 0x10, 0x00, 0x00, 0x02, 0x02, 0x12, 0x00, 0x10, 0x10, 0x12, 0x12, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x10, 0x12, 0x02, 0x12, 0x00, 0x10, 0x12, 0x12, 0x00, 0x10, 0x10, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM victory[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x80, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x1c, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x9c, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xe4, 0x00, 
0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x8f, 0x00, 0x00, 0xff, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xef, 0x00, 0x00, 0xff, 0x00, 0x00, 0x0d, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x87, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x5f, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xc7, 0x00, 0x00, 0xff, 0x00, 0x00, 0xef, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xc7, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xdf, 0x00, 0x00, 0x87, 0x00, 0x00, 0x1f, 0x00, 
0x00, 0x00, 0x00, 0xe6, 0x00, 0x00, 0xff, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x60, 0x00, 0x00, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfd, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x5f, 0x00, 0x00, 0xfb, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x1d, 0x00, 0x00, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xff, 0x00, 0x00, 0x9f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xf7, 0x00, 0x00, 0xe3, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xf1, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x0e, 0x7e, 0xf0, 0x03, 0x00, 0x00, 0x00, 0xf0, 0x7e, 0x0e, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0xc6, 0x06, 0x06, 0x8e, 0x0e, 0x00, 0x20, 0x06, 0x06, 0x06, 0x06, 0xfe, 0xfe, 0x06, 0x06, 0xf6, 0x06, 0x00, 0x00, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0xf6, 0x06, 0x06, 0xfe, 0xfe, 0x00, 0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0xd6, 0xc6, 0xc6, 0xfe, 0xfe, 0x00, 0x00, 0x06, 0x3e, 0xf0, 0x80, 0x00, 0x07, 0x80, 0xf0, 0x3e, 0x06, 0x00, 0xff, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xff, 0x00, 0x00, 0x07, 0x00, 0x00, 0xff, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xff, 0x00, 
0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf3, 0x00, 0x00, 0xbb, 0x00, 0x00, 0xff, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xf8, 0x00, 0x03, 0x0f, 0x38, 0x38, 0x0f, 0x03, 0x00, 0xf0, 0x00, 0x00, 0x3f, 0x3f, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x39, 0x38, 0x00, 0x67, 0x00, 0x00, 0xe0, 0x00, 0x3f, 0x3f, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0xb4, 0x30, 0x30, 0x3f, 0x3f, 0x00, 0x00, 0x3f, 0x3f, 0x00, 0x00, 0x01, 0xe3, 0x06, 0x0c, 0x18, 0x30, 0x20, 0x07, 0x00, 0x00, 0xe0, 0x03, 0x3f, 0x3f, 0x03, 0x00, 0xc0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x07, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 
0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xf7, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xbf, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x9f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfa, 0x00, 0x00, 0xff, 0x00, 0x00, 0xe6, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xc7, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x8e, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbc, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xdf, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 
0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xf7, 0x00, 0x00, 0xff, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfd, 0x00, 0x00, 0xfb, 0x00, 0x00, 0xff, 0x00, 0x00, 0xe1, 0x00, 0x00, 0xff, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xf1, 0x00, 0x00, 0xff, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xbf, 0x00, 0x00, 0xff, 0x00, 0x00, 0xe7, 0x00, 0x00, 0xff, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xff, 0x00, 0x00, 0xdf, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xff, 0x00, 0x00, 0x07, 0x00, 0x00, 0xff, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xff, 0x00, 0x00, 0x83, 0x00, 0x00, 0xff, 0x00, 0x00, 0xdf, 0x00, 0x00, 0xff, 0x00, 
0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x03, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x07, 0x00, 
};

const uint8_t PROGMEM gameOverScreen[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x1f, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x83, 0x83, 0x8f, 0x8f, 0x00, 0x00, 0xff, 0xff, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x38, 0xe0, 0xe0, 0x38, 0x0e, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x63, 0x63, 0x63, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x0e, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x1f, 0x1f, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xfe, 0xfe, 0x00, 0x00, 0x0e, 0x7e, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7e, 0x0e, 0x00, 0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x38, 0x38, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x3f, 0x3f, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x3c, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM block1[] = {
8, 8,
0x7e, 0xe7, 0xc3, 0x81, 0x81, 0xc3, 0xe7, 0x7e, 
};
const uint8_t PROGMEM block1mask[] = {
0x7e, 0xe7, 0xc3, 0x81, 0x81, 0xc3, 0xe7, 0x7e, 
};
const uint8_t PROGMEM block2[] = {
8, 8,
0xdb, 0xdb, 0x00, 0xdb, 0xdb, 0x00, 0xdb, 0xdb, 
};
const uint8_t PROGMEM block2mask[] = {
0xdb, 0xdb, 0x00, 0xdb, 0xdb, 0x00, 0xdb, 0xdb, 
};
const uint8_t PROGMEM block3[] = {
8, 8,
0xee, 0xab, 0xee, 0x44, 0x22, 0x77, 0xd5, 0x77, 
};
const uint8_t PROGMEM block3mask[] = {
0xee, 0xab, 0xee, 0x44, 0x22, 0x77, 0xd5, 0x77, 
};
const uint8_t PROGMEM block4[] = {
8, 8,
0x00, 0xb6, 0x01, 0xdb, 0x00, 0xb6, 0x01, 0xdb, 
};
const uint8_t PROGMEM block4mask[] = {
0x00, 0xb6, 0x01, 0xdb, 0x00, 0xb6, 0x01, 0xdb, 
};
const uint8_t PROGMEM block5[] = {
8, 8,
0x01, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x80, 
};
const uint8_t PROGMEM block5mask[] = {
0x01, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x80, 
};

const uint8_t PROGMEM player1[] = {
8, 8,
0xc3, 0xa5, 0x7e, 0x7e, 0x24, 0x24, 0x18, 0x18, 
};
const uint8_t PROGMEM player1mask[] = {
0xc3, 0xe7, 0x7e, 0x7e, 0x3c, 0x3c, 0x18, 0x18, 
};
const uint8_t PROGMEM player2[] = {
8, 8,
0x18, 0x18, 0x24, 0x24, 0x7e, 0x7e, 0xa5, 0xc3, 
};
const uint8_t PROGMEM player2mask[] = {
0x18, 0x18, 0x3c, 0x3c, 0x7e, 0x7e, 0xe7, 0xc3, 
};
const uint8_t PROGMEM player3[] = {
8, 8,
0x03, 0x0d, 0x3e, 0xcc, 0xcc, 0x3e, 0x0d, 0x03, 
};
const uint8_t PROGMEM player3mask[] = {
0x03, 0x0f, 0x3e, 0xfc, 0xfc, 0x3e, 0x0f, 0x03, 
};
const uint8_t PROGMEM player4[] = {
8, 8,
0xc0, 0xb0, 0x7c, 0x33, 0x33, 0x7c, 0xb0, 0xc0, 
};
const uint8_t PROGMEM player4mask[] = {
0xc0, 0xf0, 0x7c, 0x3f, 0x3f, 0x7c, 0xf0, 0xc0, 
};

const uint8_t PROGMEM enemy1[] = {
8, 8,
0x18, 0x24, 0x5e, 0xbf, 0xbb, 0x72, 0x3c, 0x18, 
};
const uint8_t PROGMEM enemy1mask[] = {
0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x3c, 0x18, 
};

const uint8_t PROGMEM enemy2[] = {
8, 8,
0xff, 0x99, 0xbb, 0xff, 0xff, 0x99, 0xbb, 0xff, 
};
const uint8_t PROGMEM enemy2mask[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM striker1[] = {
16, 16,
0xe0, 0x78, 0xfc, 0xde, 0x6e, 0x5b, 0xbf, 0xd7, 0xcd, 0xbf, 0x57, 0xee, 0x7e, 0xdc, 0xf8, 0xe0, 
0x07, 0x1f, 0x3b, 0x7e, 0x77, 0xea, 0xfd, 0xb3, 0xeb, 0xfd, 0xda, 0x76, 0x7b, 0x3f, 0x1e, 0x07, 
};
const uint8_t PROGMEM striker1mask[] = {
0xe0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xe0, 
0x07, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x07, 
};

const uint8_t PROGMEM boss1[] = {
32, 32,
0xf0, 0x5c, 0xf6, 0xfe, 0xfb, 0xff, 0xff, 0xab, 0xd7, 0xbb, 0xd6, 0xae, 0xfc, 0xf0, 0x40, 0xc0, 0x40, 0xc0, 0xf0, 0x5c, 0xf6, 0xfe, 0xfb, 0xff, 0xff, 0xab, 0xd7, 0xbb, 0xd6, 0xae, 0xfc, 0xf0, 
0x03, 0x0f, 0x1d, 0x1a, 0x35, 0x2b, 0xbf, 0xef, 0xbf, 0xb7, 0x9f, 0x9f, 0x8f, 0xc3, 0x20, 0xaa, 0xbf, 0x20, 0xc3, 0x8f, 0x9d, 0x9a, 0xb5, 0xab, 0xbf, 0xef, 0x7f, 0x37, 0x1f, 0x1f, 0x0f, 0x03, 
0xc0, 0x70, 0xd8, 0xf8, 0xec, 0xfc, 0xfe, 0xaf, 0x5c, 0xed, 0x58, 0xb9, 0xf0, 0xc3, 0x04, 0x54, 0xfd, 0x04, 0xc3, 0x70, 0xd9, 0xf8, 0xed, 0xfc, 0xfe, 0xaf, 0x5c, 0xec, 0x58, 0xb8, 0xf0, 0xc0, 
0x0f, 0x3d, 0x77, 0x6b, 0xd7, 0xaf, 0xff, 0xbe, 0xff, 0xde, 0x7f, 0x7e, 0x3f, 0x0f, 0x01, 0x03, 0x01, 0x03, 0x0f, 0x3d, 0x77, 0x6b, 0xd7, 0xaf, 0xff, 0xbe, 0xff, 0xde, 0x7f, 0x7e, 0x3f, 0x0f, 
};
const uint8_t PROGMEM boss1mask[] = {
0xf0, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf0, 0x40, 0xc0, 0xc0, 0xc0, 0xf0, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf0, 
0x03, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0xff, 0xff, 0xbf, 0xbf, 0x9f, 0x9f, 0x8f, 0xc3, 0xe0, 0xff, 0xff, 0xe0, 0xc3, 0x8f, 0x9f, 0x9f, 0xbf, 0xbf, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x1f, 0x0f, 0x03, 
0xc0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xff, 0xff, 0xfd, 0xfd, 0xf9, 0xf9, 0xf1, 0xc3, 0x07, 0xff, 0xff, 0x07, 0xc3, 0xf1, 0xf9, 0xf9, 0xfd, 0xfd, 0xff, 0xff, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xc0, 
0x0f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x0f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x0f, 
};

const uint8_t PROGMEM end1[] = {
24, 24,
0xfc, 0xfe, 0x0f, 0x07, 0x03, 0x63, 0xe3, 0x43, 0x43, 0xc3, 0x83, 0x83, 0x83, 0x83, 0xc3, 0x43, 0x43, 0xe3, 0x63, 0x03, 0x07, 0x0f, 0xfe, 0xfc, 
0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x7e, 0x42, 0xc3, 0x00, 0x18, 0x18, 0x00, 0xc3, 0x42, 0x7e, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
0x3f, 0x7f, 0xf0, 0xe0, 0xc0, 0xc7, 0xc7, 0xc2, 0xc2, 0xc3, 0xc1, 0xc1, 0xc1, 0xc1, 0xc3, 0xc2, 0xc2, 0xc7, 0xc7, 0xc0, 0xe0, 0xf0, 0x7f, 0x3f, 
};
const uint8_t PROGMEM end1mask[] = {
0xfc, 0xfe, 0x0f, 0x07, 0x03, 0x63, 0xe3, 0x43, 0x43, 0xc3, 0x83, 0x83, 0x83, 0x83, 0xc3, 0x43, 0x43, 0xe3, 0x63, 0x03, 0x07, 0x0f, 0xfe, 0xfc, 
0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x7e, 0x42, 0xc3, 0x00, 0x18, 0x18, 0x00, 0xc3, 0x42, 0x7e, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
0x3f, 0x7f, 0xf0, 0xe0, 0xc0, 0xc7, 0xc7, 0xc2, 0xc2, 0xc3, 0xc1, 0xc1, 0xc1, 0xc1, 0xc3, 0xc2, 0xc2, 0xc7, 0xc7, 0xc0, 0xe0, 0xf0, 0x7f, 0x3f, 
};

const uint8_t PROGMEM brick1[] = {
6, 6,
0x1e, 0x21, 0x2d, 0x2d, 0x21, 0x1e, 
};
const uint8_t PROGMEM brick1mask[] = {
0x1e, 0x21, 0x2d, 0x2d, 0x21, 0x1e, 
};

const uint8_t PROGMEM debris[] = {
2, 2,
0x03, 0x03, 
};
const uint8_t PROGMEM debrisMask[] = {
0x03, 0x03, 
};

const uint8_t PROGMEM heart[] = {
8, 8,
0x1e, 0x2b, 0x5f, 0xbe, 0xfe, 0x7f, 0x3d, 0x1e, 
};
const uint8_t PROGMEM heartMask[] = {
0x1e, 0x3f, 0x7f, 0xfe, 0xfe, 0x7f, 0x3f, 0x1e, 
};

const uint8_t PROGMEM leftSide[] = {
32, 64,
0x01, 0x03, 0x07, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xef, 0x17, 0x2f, 0x17, 0x2f, 0x57, 0xaf, 0x57, 0xaf, 0xd7, 0x2f, 0x17, 0x2f, 0x17, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0b, 0x16, 0x0a, 0x16, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x17, 0x0a, 0x16, 0x0a, 0x16, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x3f, 0x7f, 0xff, 
};
const uint8_t PROGMEM rightSide[] = {
32, 64,
0xff, 0x01, 0x03, 0x07, 0x5f, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0x57, 0xff, 0xff, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x54, 0xaa, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x04, 0x02, 0x54, 0xaa, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x55, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x55, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x55, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x55, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xff, 0xd5, 0xaa, 0xc0, 0xa0, 0xc0, 0xa0, 0xc0, 0xa0, 0xc0, 0xa0, 0xc0, 0xa0, 0xc0, 0xa0, 0xd5, 0xaa, 0x80, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0xff, 0xff, 
0x7f, 0x00, 0x00, 0x00, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x3f, 0x7f, 0xff, 
};
const uint8_t PROGMEM sideMask[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM soundIcon[] = {
8, 13,
0x10, 0xe0, 0x00, 0x0c, 0xf0, 0x01, 0x06, 0xf8, 
0x01, 0x00, 0x00, 0x06, 0x01, 0x10, 0x0c, 0x03, 
};
const uint8_t PROGMEM soundIconMask[] = {
0x10, 0xe0, 0x00, 0x0c, 0xf0, 0x01, 0x06, 0xf8, 
0x01, 0x00, 0x00, 0x06, 0x01, 0x10, 0x0c, 0x03, 
};

const uint8_t PROGMEM speaker[] = {
8, 15,
0xf0, 0x10, 0x10, 0x10, 0x08, 0x04, 0x02, 0xff, 
0x07, 0x04, 0x04, 0x04, 0x08, 0x10, 0x20, 0x7f, 
};

const uint8_t PROGMEM title[] = {
86, 22,
0x00, 0x00, 0x00, 0x00, 0xff, 0xe9, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0xf8, 0xf0, 0x60, 0x00, 0x00, 0x60, 0xf0, 0xf8, 0xec, 0xf6, 0xfb, 0xfd, 0xfd, 0xff, 0xfd, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf8, 0xd8, 0xd8, 0x98, 0xb8, 0x30, 0x00, 0x00, 0xe0, 0xf0, 0x38, 0x18, 0x18, 0x38, 0xf0, 0xe0, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0x18, 0x38, 0xf0, 0xe0, 0x00, 0x00, 0xe0, 0xf0, 0x38, 0x18, 0x18, 0x30, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x0b, 0x0f, 0x0f, 0xef, 0xaf, 0xcd, 0x06, 0xe3, 0xa1, 0xe0, 0x00, 0xe0, 0x80, 0x80, 0x00, 0xe1, 0xe3, 0xc7, 0x0f, 0x2f, 0xcb, 0x2f, 0x0b, 0x09, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0e, 0x0c, 0x0c, 0x0d, 0x0f, 0x07, 0x00, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0c, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0c, 0x06, 0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0c, 0x06, 0x0f, 0x0f, 
0x00, 0x00, 0x08, 0x0e, 0x02, 0x00, 0x0e, 0x08, 0x0e, 0x00, 0x0e, 0x0a, 0x0c, 0x00, 0x0e, 0x0a, 0x0c, 0x00, 0x0e, 0x0a, 0x0e, 0x00, 0x0e, 0x08, 0x0e, 0x00, 0x0e, 0x04, 0x0e, 0x00, 0x0e, 0x0a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM button[] = {
86, 22,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0xb0, 0xd0, 0xf8, 0xe8, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x70, 0x60, 0x00, 0x00, 0xe0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0x1d, 0x37, 0x7f, 0x7f, 0xff, 0xbf, 0xbf, 0x5f, 0x5f, 0x2f, 0x1b, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x07, 0x0f, 0x1f, 0x37, 0x67, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7f, 0x60, 0x60, 0x60, 0x60, 0x60, 0x66, 0x66, 0x7e, 0x3e, 0x00, 0x00, 0x3f, 0x7f, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// Array Data
// data is: corners / enemyRate / block type
uint8_t gameData[] =
{
            50,12,2, 200,17,3, 75,10,4, 300,7,5,
  100,15,1, 50,12,2, 200,17,3, 75,10,4, 300,7,5,
  100,15,1, 50,12,2, 200,17,3, 75,10,4, 300,7,5,
};

// Music

const uint16_t MENUTune[] PROGMEM = {
  200,50, NOTE_REST,50, 200,50, NOTE_REST,50,
  200,50, NOTE_REST,50, 200,50, NOTE_REST,50,
  200,50, 200,50, 200,50, NOTE_REST,50,
  200,50, NOTE_REST,50, 200,50, NOTE_REST,50,
  200,50, 200,50, 200,50, NOTE_REST,50,
  200,50, NOTE_REST,50, 200,50, NOTE_REST,50,
  700,200, 800,200, 900,200,
  700,200, 800,200, 900,200,
  700,200, 800,200, 900,200,
  900,200, 800,200, 700,200,
  900,200, 800,200, 700,200,
  200,50, NOTE_REST,50, 200,50, NOTE_REST,50,
  200,50, NOTE_REST,50, 200,50, NOTE_REST,50,
  200,50, 200,50, 200,50, NOTE_REST,50,
  200,50, NOTE_REST,50, 200,50, NOTE_REST,50,
  200,50, 200,50, 200,50, NOTE_REST,50,
  200,50, NOTE_REST,50, 200,50, NOTE_REST,50,
  TONES_END
};

const uint16_t DEATHTune[] PROGMEM = {
  500, 500,  NOTE_REST,20, 400, 500, 50,250,  NOTE_REST,20, 60,250, 70,250,
  TONES_END
};

const uint16_t WINTune[] PROGMEM = {
  500,50, 400,50, 500,50, 400,50,  
  500,50, 400,50, 500,50, 400,50, 
  500,50, 400,50, 500,50, 400,50, 
  500,50, 400,50, 500,50, 400,50,
  700,100, 800,100,
  500,50, 400,50, 500,50, 400,50,  
  500,50, 400,50, 500,50, 400,50, 
  500,50, 400,50, 500,50, 400,50, 
  500,50, 400,50, 500,50, 400,50,
  700,100, 800,100, 700,100, 800,100,
  TONES_END
};

// Variables

// initial level variables
uint8_t level = 1;
uint8_t corners = 100;
uint8_t enemyRate = 15; // spawn rate (lower more)
int dataReader = 0;

// general variables
bool firstRun = true;
bool start = false;
bool go = true;
bool s = true;  // Sound on or off
uint8_t i;
int r;
uint8_t x;
uint8_t y;
int winDelay = 0;

uint8_t anim9 = 0;
uint8_t anim2 = 0;
uint8_t anim3 = 0;
int gameProgress = 0;
int gameProgressBar;
int levelProgress = 0;
int levelProgressBar;

// player variables
bool playerAlive = true;
int c = 0; // death countdown
uint8_t playerX = 60;
uint8_t playerY = 28;
uint8_t lives = 4;
int score = 0;

// bullet variables
uint8_t bulletNumber = 9;
int bulletExist[10];
int bulletX[10];
int bulletY[10];
int bulletXvel[10];
int bulletYvel[10];

// enemy variables
uint8_t enemyNumber = 3;
int enemyExist[4];
int enemyX[4];
int enemyY[4];

int xGet;
int yGet;

uint8_t enemy2Number = 3;
int enemy2Exist[4];
int enemy2X[4];
int enemy2Y[4];

uint8_t healthExist;
int healthX;
int healthY;

int strikerExist;
uint8_t strikerHealth;
int strikerX;
int strikerY;

uint8_t brickNumber = 3;
int brickExist[4];
int brickX[4];
int brickY[4];
int brickXvel[4];
int brickYvel[4];

int bossExist;
int bossHealth;
int bossX;
int bossY;

int endExist;
int endHealth;
int endX;
int endY;

// debris variables
uint8_t debrisNumber = 14;
int debrisExist[15];
int debrisX[15];
int debrisY[15];
int debrisXvel[15];
int debrisYvel[15];

// junk variables
uint8_t junkNumber = 10;
int junkExist[11];
int junkX[11];
int junkY[11];
int junkXvel[11];
int junkYvel[11];

// block scrolling variables
uint8_t screenMax = 10;
uint8_t screen[11][11];
uint8_t screenCopy[11][11];
uint8_t blockType = 1;
int offsetX;
int offsetY;

// level path variables
uint8_t currentDirection = 1; // 1 Left, 2 Right, 3 Down, 4 Up
uint8_t nextDirection = 3;
uint8_t sectionLength = 24;

// star variables
int starNumber = 50;
int starX[51];
int starY[51];
uint8_t starType[51]; // 1 2 or 3 will deturmine star speed

void setup()
{
  arduboy.begin();
  arduboy.setFrameRate(50);
  arduboy.initRandomSeed();
  arduboy.display();
}

void loop()
{
  if (!(arduboy.nextFrame()))
    return;
  arduboy.clear();

  if (start == false)
  {
    // Intro
    if (firstRun == true)
    {
      // Intro Screen
      arduboy.clear();
      Sprites::drawOverwrite(0, 0, titleScreen, 0);
      arduboy.display();
      arduboy.delayShort(3000);
    }

    // Game Title screen loop in here
    firstRun = false;

    c++;
    if (c == 600)
    {
      c = 0;
    }
    arduboy.clear();

    if (c < 400)
    {
      Sprites::drawOverwrite(7,20, button, 0);
      Sprites::drawOverwrite(0,42, title, 0);
      Sprites::drawOverwrite(95, 42, speaker, 0);
      if (s == true)
      {
        Sprites::drawExternalMask(105, 43, soundIcon, soundIconMask, 0,  0);
      }
      arduboy.display();   
    }
    else
    {
      arduboy.clear();
      Sprites::drawOverwrite(0, 0, titleScreen, 0);
      arduboy.display();
      if (c == 401)
      {
      if (s == 1)
      {
        sound.tones(MENUTune);
      }
      }
    }

    if (arduboy.pressed(A_BUTTON))
    {
      start = true;
      newGame();
      c = 0;
    }
    if (arduboy.pressed(B_BUTTON))
    {
      start = true;
      newGame();
      c = 0;
    }
    if (arduboy.pressed(RIGHT_BUTTON))
    {
      s = true;
    }
    if (arduboy.pressed(LEFT_BUTTON))
    {
      s = false;
    }
  }

  // Main Game LOOP #########################################################################################################################################
  if (start == true)
  {
    anim();
    drawBlocks();
    drawStars();
    drawPlayer();
    moveJet();
    moveBullet();
    drawHealth();
    drawEnemy();
    draw2Enemy();
    drawStriker();
    drawBoss();
    drawEnd();
    drawBrick();
    moveJunk();
    if (playerAlive == false)
    {
      moveExplode();
    }
    if (start == true)
    {
      drawHUD();
      arduboy.display();
    }
    if (go == true)
    {
      scrollScreen();
    }
    gameUnfold();
  }
  // End of Main Game LOOP ###################################################################################################################################
}

// Subroutines

void anim()
{
  if (c > 0) // player respwawn delay
  {
    c--;
  }
  if (c == 100)
  {
    //playerX = 60;
    //playerY = 28;

    if (currentDirection == 1)
    {
      playerX = 40;
      playerY = 28;
    }
    if (currentDirection == 2)
    {
      playerX = 80;
      playerY = 28;
    }
    if (currentDirection == 3)
    {
      playerX = 60;
      playerY = 8;
    }
    if (currentDirection == 4)
    {
      playerX = 60;
      playerY = 48;
    }

    playerAlive = true;
    for (i = 0 ; debrisNumber > i ; i ++)
    {
      debrisExist[i] = 0;
    }
    if (lives == 0)
    {
      gameOver();
    }
  }

  anim9++;
  if (anim9 == 10)
  {
    anim9 = 0;
  }
  anim2++;
  if (anim2 == 3)
  {
    anim2 = 0;
  }
  anim3++;
  if (anim3 == 4)
  {
    anim3 = 0;
  }
}

void gameOver()
{
  arduboy.clear();
  Sprites::drawOverwrite(0, 0, gameOverScreen, 0);
  arduboy.display();
  if (s == 1)
  {
    sound.tones(DEATHTune);
  }
  arduboy.delayShort(3000);
  resetVariables();
}

void winGame()
{
  xGet = endX+12;
  yGet = endY+12;
  enemyExplode;
  if (s == true)
  {
    sound.tone(NOTE_C1, 500);
  }
  winDelay = 100;
}

void endGame()
{
  arduboy.clear();
  Sprites::drawOverwrite(0, 0, victory, 0);
  arduboy.display();
  if (s == 1)
  {
    sound.tones(WINTune);
  }
  arduboy.delayShort(5000);
  resetVariables();
}


void gameUnfold() // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
{
  if (winDelay > 0)
  {
    winDelay--;
    if (winDelay == 1)
    {
      endGame();
    }
  }
  if (levelProgress > 500)
  {
    go = false;
    spawnBoss();

  }

  if (gameProgress > 5000)
  //if (gameProgress > 50)
  {
    go = false;
    spawnEnd();
  }
  
  if (c == 0) // only spawn enimies after player reset
  {
    i = rand() % enemyRate;
    if (i == 1)
    {
      spawnEnemy();
    }
    i = rand() % enemyRate;
    if (i == 1)
    {
      spawn2Enemy();
    }

    r = rand() % 1000;
    if (r == 1)
    {
      spawnStriker();
    }  

    r = rand() % 50;
    if (r == 1)
    {
      spawnHealth();
    }    
  }
} // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

void spawnEnd()
{
    if (endExist == 0)
    {
      endExist = 20000;
      endHealth = 500;
      
      if (currentDirection == 1)
      {
        endX = 100;
        r = rand() % 32 + 10;
        endY = r;
      }
      if (currentDirection == 2)
      {
        endX = 10;
        r = rand() % 32 + 10;
        endY = r;
      }
      if (currentDirection == 3)
      {
        r = rand() % 32 + 40;
        endX = r;
        endY = 70;
      }
      if (currentDirection == 4)
      {
        r = rand() % 32 + 40;
        endX = r;
        endY = -10;
      }    
    }
}

void drawEnd()
{
  if (endExist > 0 && winDelay == 0)
  {
    r=rand() % 30;
    if (r == 1)
    {
      spawnBrick();
    }

      r=rand() % 4 +1;
      if (r == 1)
      {
        endX++;
      }
      if (r == 2)
      {
        endX--;
      }
      if (r == 3)
      {
        endY++;
      }
      if (r == 4)
      {
        endY--;
      }

    if (currentDirection == 1)
    {
      if (endExist > 100)
      {
        if (endX > 80)
        {
          endX--;
        }
      }
      else
      {
        endX++;
      }
    }
    if (currentDirection == 2)
    {
      if (endExist > 100)
      {
        if (endX < 20)
        {
          endX++;
        }
      }
      else
      {
        endX--;
      }
    }
    if (currentDirection == 3)
    {
      if (endExist > 100)
      {
        if (endY > 49)
        {
          endY--;
        }
      }
      else
      {
        endY++;
      }
    }
    if (currentDirection == 4)
    {
      if (endExist > 100)
      {
        if (endY < 15)
        {
          endY++;
        }
      }
      else
      {
        endY--;
      }
    }
    Sprites::drawExternalMask(endX, endY, end1, end1mask, 0,  0);
    //endExist--;
    if (playerAlive == true)
    {
      Rect endCol(endX, endY, 24, 24);
      Rect playerCol(playerX,playerY, 8, 8);
      if (arduboy.collide(endCol, playerCol))
      {
        lives--;
        if (s == true)
        {
          sound.tone(NOTE_C2, 200);
        }
        playerExplode();
      }
    }
  }
}

void spawnBoss()
{
    if (bossExist == 0)
    {
      bossExist = 500;
      bossHealth = 300;
      
      if (currentDirection == 1)
      {
        bossX = 100;
        r = rand() % 20 + 10;
        bossY = r;
      }
      if (currentDirection == 2)
      {
        bossX = 10;
        r = rand() % 20 + 10;
        bossY = r;
      }
      if (currentDirection == 3)
      {
        r = rand() % 20 + 40;
        bossX = r;
        bossY = 70;
      }
      if (currentDirection == 4)
      {
        r = rand() % 20 + 40;
        bossX = r;
        bossY = -10;
      }    
    }
}

void drawBoss()
{
  if (bossExist > 0)
  {
    r=rand() % 30;
    if (r == 1)
    {
      spawnBrick();
    }

    if (currentDirection == 1)
    {
      if (bossExist > 100)
      {
        if (bossX > 71)
        {
          bossX--;
        }
      }
      else
      {
        bossX++;
      }
    }
    if (currentDirection == 2)
    {
      if (bossExist > 100)
      {
        if (bossX < 25)
        {
          bossX++;
        }
      }
      else
      {
        bossX--;
      }
    }
    if (currentDirection == 3)
    {
      if (bossExist > 100)
      {
        if (bossY > 40)
        {
          bossY--;
        }
      }
      else
      {
        bossY++;
      }
    }
    if (currentDirection == 4)
    {
      if (bossExist > 100)
      {
        if (bossY < -4)
        {
          bossY++;
        }
      }
      else
      {
        bossY--;
      }
    }
    Sprites::drawExternalMask(bossX, bossY, boss1, boss1mask, 0,  0);
    bossExist--;
    if (playerAlive == true)
    {
      Rect bossCol(bossX, bossY, 32, 32);
      Rect playerCol(playerX,playerY, 8, 8);
      if (arduboy.collide(bossCol, playerCol))
      {
        lives--;
        if (s == true)
        {
          sound.tone(NOTE_C2, 200);
        }
        playerExplode();
      }
    }
  }
}

void spawnStriker()
{
    if (strikerExist == 0)
    {
      strikerExist = 250;
      strikerHealth = 50;
      
      if (currentDirection == 1)
      {
        strikerX = 100;
        r = rand() % 32 + 10;
        strikerY = r;
      }
      if (currentDirection == 2)
      {
        strikerX = 10;
        r = rand() % 32 + 10;
        strikerY = r;
      }
      if (currentDirection == 3)
      {
        r = rand() % 32 + 40;
        strikerX = r;
        strikerY = 70;
      }
      if (currentDirection == 4)
      {
        r = rand() % 32 + 40;
        strikerX = r;
        strikerY = -10;
      }    
    }
}

void drawStriker()
{
  if (strikerExist > 0)
  {
    r=rand() % 30;
    if (r == 1)
    {
      spawnBrick();
    }

    if (currentDirection == 1)
    {
      if (strikerExist > 100)
      {
        if (strikerX > 75)
        {
          strikerX--;
        }
      }
      else
      {
        strikerX++;
      }
    }
    if (currentDirection == 2)
    {
      if (strikerExist > 100)
      {
        if (strikerX < 35)
        {
          strikerX++;
        }
      }
      else
      {
        strikerX--;
      }
    }
    if (currentDirection == 3)
    {
      if (strikerExist > 100)
      {
        if (strikerY > 44)
        {
          strikerY--;
        }
      }
      else
      {
        strikerY++;
      }
    }
    if (currentDirection == 4)
    {
      if (strikerExist > 100)
      {
        if (strikerY < 8)
        {
          strikerY++;
        }
      }
      else
      {
        strikerY--;
      }
    }
    Sprites::drawExternalMask(strikerX, strikerY, striker1, striker1mask, 0,  0);
    strikerExist--;
    if (playerAlive == true)
    {
      Rect strikerCol(strikerX, strikerY, 16, 16);
      Rect playerCol(playerX,playerY, 8, 8);
      if (arduboy.collide(strikerCol, playerCol))
      {
        lives--;
        if (s == true)
        {
          sound.tone(NOTE_C2, 200);
        }
        playerExplode();
      }
    }
  }
}

void spawnBrick()
{
  for (i = 0; brickNumber > i; i ++)
  {
    if (brickExist[i] == 0)
    {
    r = rand() % 5;
    if (r == 1)
    {
      brickExist[i] = 50;


      if (strikerExist > 0)
      {
        brickX[i] = strikerX + 6;
        brickY[i] = strikerY + 6;
      }
      
      if (bossExist > 0)
      {
        brickX[i] = bossX + 10;
        brickY[i] = bossY + 10;
      }

      if (endExist > 0)
      {
      if (currentDirection == 1)
      {
        brickX[i] = 100;
        r = rand() % 40 + 10;
        brickY[i] = r;
      }
      if (currentDirection == 2)
      {
        brickX[i] = 10;
        r = rand() % 40 + 10;
        brickY[i] = r;
      }
      if (currentDirection == 3)
      {
        r = rand() % 40 + 40;
        brickX[i] = r;
        brickY[i] = 70;
      }
      if (currentDirection == 4)
      {
        r = rand() % 40 + 40;
        brickX[i] = r;
        brickY[i] = -10;
      }    
      }

     if (currentDirection == 1)
    {
      brickXvel[i] = -1;
      brickYvel[i] = 0;
    }
    if (currentDirection == 2)
    {
      brickXvel[i] = 1;
      brickYvel[i] = 0;
    }
    if (currentDirection == 3)
    {
      brickXvel[i] = 0;
      brickYvel[i] = -1;
    }
    if (currentDirection == 4)
    {
      brickXvel[i] = 0;
      brickYvel[i] = 1;
    }
    }
    }
  }
}

void drawBrick()
{
  for (i = 0 ; i < brickNumber ; i ++)
  {
    if (brickExist[i] > 0)
    {

      brickX[i] = brickX[i] + brickXvel[i];
      brickY[i] = brickY[i] + brickYvel[i];

      r = rand() % 2 + 1;
      if (currentDirection == 1)
      {
        if (r == 1)
        {
          brickY[i]++;
        }
        if (r == 2)
        {
          brickY[i]--;
        }
      }
      if (currentDirection == 2)
      {
        if (r == 1)
        {
          brickY[i]++;
        }
        if (r == 2)
        {
          brickY[i]--;
        }
      }
      if (currentDirection == 3)
      {
        if (r == 1)
        {
          brickX[i]++;
        }
        if (r == 2)
        {
          brickX[i]--;
        }
      }
      if (currentDirection == 4)
      {
        if (r == 1)
        {
          brickX[i]++;
        }
        if (r == 2)
        {
          brickX[i]--;
        }
      }
  
      Sprites::drawExternalMask(brickX[i], brickY[i], brick1, brick1mask, 0,  0);
      brickExist[i]--;

      if (playerAlive == true)
      {
      Rect brickCol(brickX[i],brickY[i], 6, 6); // Player / enemy
      Rect playerCol(playerX,playerY, 8, 8);
      if (arduboy.collide(brickCol, playerCol))
      {
        lives--;
        brickExist[i] = 0;

        if (s == true)
        {
          sound.tone(NOTE_C2, 200);
        }
        playerExplode();
      }
      }
    }
  }  
}

void spawnHealth()
{
  r = rand() % 25;
  if (r == 1)
  {
    if (healthExist == 0)
    {
      healthExist = 200;
      
      if (currentDirection == 1)
      {
        healthX = 100;
        r = rand() % 40 + 10;
        healthY = r;
      }
      if (currentDirection == 2)
      {
        healthX = 10;
        r = rand() % 40 + 10;
        healthY = r;
      }
      if (currentDirection == 3)
      {
        r = rand() % 40 + 40;
        healthX = r;
        healthY = 70;
      }
      if (currentDirection == 4)
      {
        r = rand() % 40 + 40;
        healthX = r;
        healthY = -10;
      }    
    }
  }
}

void drawHealth()
{
  if (healthExist > 0)
  {
    if (currentDirection == 1)
    {
      healthX--;
    }
    if (currentDirection == 2)
    {
      healthX++;
    }
    if (currentDirection == 3)
    {
      healthY--;
    }
    if (currentDirection == 4)
    {
      healthY++;
    }
    Sprites::drawExternalMask(healthX, healthY, heart, heartMask, 0,  0);
    healthExist--;
    if (playerAlive == true)
    {
      Rect healthCol(healthX, healthY, 8, 8);
      Rect playerCol(playerX,playerY, 8, 8);
      if (arduboy.collide(healthCol, playerCol))
      {
        if (lives < 4)
        {
          lives++;
        }
        healthExist = 0;
        if (s == true)
        {
          sound.tone(NOTE_C8, 50);
        }
      }
    }
  }
}

void grabData()
{
  corners = gameData[dataReader];
  dataReader++;
  enemyRate = gameData[dataReader];
  dataReader++;
  blockType = gameData[dataReader];
  dataReader++;
  level++;
  levelProgress = 0;
}

void spawnEnemy()
{
  for (int i = 0 ; i < enemyNumber ; i ++) // Spawn Enemy
  {
    r = rand() % 100;
    if (r == 50)
    {
    if (enemyExist[i] == 0) // create Enemy
    {
      enemyExist[i] = 250;
      
      if (currentDirection == 1)
      {
        enemyX[i] = 100;
        r = rand() % 40 + 10;
        enemyY[i] = r;
      }
      if (currentDirection == 2)
      {
        enemyX[i] = 10;
        r = rand() % 40 + 10;
        enemyY[i] = r;
      }
      if (currentDirection == 3)
      {
        r = rand() % 40 + 40;
        enemyX[i] = r;
        enemyY[i] = 70;
      }
      if (currentDirection == 4)
      {
        r = rand() % 40 + 40;
        enemyX[i] = r;
        enemyY[i] = -10;
      }    
    }
    }
  }  
}

void spawn2Enemy()
{
  for (int i = 0 ; i < enemy2Number ; i ++) // Spawn Enemy
  {
    r = rand() % 100;
    if (r == 50)
    {
    if (enemy2Exist[i] == 0) // create Enemy
    {
      enemy2Exist[i] = 250;
      
      if (currentDirection == 1)
      {
        enemy2X[i] = 100;
        r = rand() % 40 + 10;
        enemy2Y[i] = r;
      }
      if (currentDirection == 2)
      {
        enemy2X[i] = 10;
        r = rand() % 40 + 10;
        enemy2Y[i] = r;
      }
      if (currentDirection == 3)
      {
        r = rand() % 40 + 40;
        enemy2X[i] = r;
        enemy2Y[i] = 70;
      }
      if (currentDirection == 4)
      {
        r = rand() % 40 + 40;
        enemy2X[i] = r;
        enemy2Y[i] = -10;
      }    
    }
    }
  }  
}

void drawEnemy()
{
  for (int i = 0 ; i < enemyNumber ; i ++) // Move enemy
  {
    if (enemyExist[i] != 0)
    {

      r=rand() % 4 +1;
      if (r == 1)
      {
        enemyX[i]++;
      }
      if (r == 2)
      {
        enemyX[i]--;
      }
      if (r == 3)
      {
        enemyY[i]++;
      }
      if (r == 4)
      {
        enemyY[i]--;
      }

      if (currentDirection == 1)
      {
        enemyX[i]--;
      }
      if (currentDirection == 2)
      {
        enemyX[i]++;
      }
      if (currentDirection == 3)
      {
        enemyY[i]--;
      }
      if (currentDirection == 4)
      {
        enemyY[i]++;
      }
  
      Sprites::drawExternalMask(enemyX[i], enemyY[i], enemy1, enemy1mask, 0,  0);
      enemyExist[i]--; // enemy age

      if (playerAlive == true)
      {
      Rect enemyCol(enemyX[i],enemyY[i], 8, 8); // Player / enemy
      Rect playerCol(playerX,playerY, 8, 8);
      if (arduboy.collide(enemyCol, playerCol))
      {
        lives--;
        enemyExist[i] = 0;
        xGet = enemyX[i];
        yGet = enemyY[i];
        enemyExplode();

        if (s == true)
        {
          sound.tone(NOTE_C2, 200);
        }
        playerExplode();
      }
      }
    }
  }  
}

void draw2Enemy()
{
  for (int i = 0 ; i < enemy2Number ; i ++) // Move enemy
  {
    if (enemy2Exist[i] != 0)
    {

      r=rand() % 4 +1;
      if (r == 1)
      {
        enemy2X[i]++;
      }
      if (r == 2)
      {
        enemy2X[i]--;
      }
      if (r == 3)
      {
        enemy2Y[i]++;
      }
      if (r == 4)
      {
        enemy2Y[i]--;
      }

      if (currentDirection == 1)
      {
        enemy2X[i]--;
      }
      if (currentDirection == 2)
      {
        enemy2X[i]++;
      }
      if (currentDirection == 3)
      {
        enemy2Y[i]--;
      }
      if (currentDirection == 4)
      {
        enemy2Y[i]++;
      }
  
      Sprites::drawExternalMask(enemy2X[i], enemy2Y[i], enemy2, enemy2mask, 0,  0);
      enemy2Exist[i]--; // enemy age

      if (playerAlive == true)
      {
      Rect enemy2Col(enemy2X[i],enemy2Y[i], 8, 8); // Player / enemy
      Rect playerCol(playerX,playerY, 8, 8);
      if (arduboy.collide(enemy2Col, playerCol))
      {
        lives--;
        if (s == true)
        {
          sound.tone(NOTE_C2, 200);
        }
        playerExplode();
      }
      }
    }
  }  
}

void enemyExplode()
{
  for (i = 0; junkNumber > i; i++)
  {
    if (junkExist[i] == 0)
    {
    junkExist[i] = rand() % 50 + 1;

    junkX[i] = xGet+4;
    junkY[i] = yGet+4;

    junkXvel[i] = rand() % 5 - 2;
    junkYvel[i] = rand() % 5 - 2;
    }
  }
}

void moveJunk()
{
  for (i = 0; junkNumber > i; i++)
  {
    if (junkExist[i] > 0)
    {
      junkX[i] = junkX[i] + junkXvel[i];
      junkY[i] = junkY[i] + junkYvel[i];
      //arduboy.drawPixel(junkX[i], junkY[i], 1);
      Sprites::drawExternalMask(junkX[i], junkY[i], debris, debrisMask, 0,  0);
      junkExist[i]--;
    }
  }
}

void playerExplode()
{
  playerAlive = false;
  c = 250;
  for (i = 0; debrisNumber > i; i++)
  {
    debrisExist[i] = rand() % 3 + 1;
    debrisX[i] = playerX+3;
    debrisY[i] = playerY+3;
    debrisXvel[i] = rand() % 5 - 2;
    debrisYvel[i] = rand() % 5 - 2;
  }
}

void moveExplode()
{
   for (i = 0; debrisNumber > i; i++)
  {
    debrisX[i] = debrisX[i] + debrisXvel[i];
    debrisY[i] = debrisY[i] + debrisYvel[i];
    Sprites::drawExternalMask(debrisX[i], debrisY[i], debris, debrisMask, 0,  0);
    debrisExist[i]--;
  }
}

void scrollScreen()
{
  if (sectionLength > 0)
  {
    if (currentDirection == 1)
    {
      offsetX--;
      if (offsetX < -8)
      {
        flipScreenRight();
      }
      if (sectionLength ==1)
      {
        for (y = 0; screenMax > y ; y++) // fill side
        {
          x = 9;
          screen[x][y] = 1;
        }
      }
    }
    if (currentDirection == 2)
    {
      offsetX++;
      if (offsetX > 8)
      {
        flipScreenLeft();
      }
      if (sectionLength ==1)
      {
        for (y = 0; screenMax > y ; y++) // fill side
        {
          x = 0;
          screen[x][y] = 1;
        }
      }
    }

    if (currentDirection == 3)
    {
      offsetY--;
      if (offsetY < -8)
      {
        flipScreenDown();
      }
      if (sectionLength == 1)
      {
        for (x = 0; screenMax > x ; x++) // fill bottom
        {
          y = 9;
          screen[x][y] = 1;
        }
      }
    }
    if (currentDirection == 4)
    {
      offsetY++;
      if (offsetY > 8)
      {
        flipScreenUp();
      }
      if (sectionLength ==1)
      {
        for (x = 0; screenMax > x ; x++) // fill top
        {
          y = 0;
          screen[x][y] = 1;
        }
      }
    }
  }
  else
  {
    currentDirection = nextDirection;
    screen[1][0] = 1; screen[0][1] = 1; screen[8][0] = 1; screen[9][1] = 1; screen[0][8] = 1; screen[1][9] = 1; screen[9][8] = 1; screen[8][9] = 1;
    if (s == true)
    {
      sound.tone(NOTE_A6, 100);
    }
    if (currentDirection == 1 || currentDirection == 2)
    {
      nextDirection = rand() % 2 + 3;
    }
    if (currentDirection == 3 || currentDirection == 4)
    {
      nextDirection = rand() % 2 + 1;
    }
    sectionLength = rand() % (corners*10)+24; /////////////////////////////// turn corner early bug ??????????
  }
}

void flipScreenRight()
{
  offsetX = 0;
  sectionLength--;
  copyScreen();
  for (y = 0;  screenMax > y ; y++)
  {
    for (x = 0 ; screenMax > x ; x++)
    {
      screen[x][y] = screenCopy[x+1][y];
    }
  }
  if (sectionLength > 7)
  {
    screen[9][1] = 1;
    screen[9][8] = 1;
  }
  else
  {
    if (nextDirection == 3)
    {
      screen[9][1] = 1;
    }
    if (nextDirection == 4)
    {
      screen[9][8] = 1;
    }
  }
}

void flipScreenLeft()
{
  offsetX = 0;
  sectionLength--;
  copyScreen();
  for (y = 0;  screenMax > y ; y++)
  {
    for (x = 0 ; screenMax > x ; x++)
    {
      screen[x][y] = screenCopy[x-1][y];
    }
  }

  screen[0][6] = 0;// glitch fix
  screen[0][4] = 0;
  screen[0][9] = 0;
  screen[0][7] = 0;
  screen[0][2] = 0;

  if (sectionLength > 7)
  {
    screen[0][1] = 1;
    screen[0][8] = 1;
  }
  else
  {
    if (nextDirection == 3)
    {
      screen[0][1] = 1;
    }
    if (nextDirection == 4)
    {
      screen[0][8] = 1;
    }
  }
}

void flipScreenDown()
{
  offsetY = 0;
  sectionLength--;
  copyScreen();
  for (y = 0;  screenMax > y ; y++)
  {
    for (x = 0 ; screenMax > x ; x++)
    {
      screen[x][y] = screenCopy[x][y+1];
    }
  }
  if (sectionLength > 7)
  {
    screen[1][9] = 1;
    screen[8][9] = 1;
  }
  else
  {
    if (nextDirection == 1)
    {
      screen[1][9] = 1;
    }
    if (nextDirection == 2)
    {
      screen[8][9] = 1;
    }
  }
}

void flipScreenUp()
{
  offsetY = 0;
  sectionLength--;
  copyScreen();
  for (y = 0;  screenMax > y ; y++)
  {
    for (x = 0 ; screenMax > x ; x++)
    {
      screen[x][y] = screenCopy[x][y-1];
    }
  }
  if (sectionLength > 7)
  {
    screen[1][0] = 1;
    screen[8][0] = 1;
  }
  else
  {
    if (nextDirection == 1)
    {
      screen[1][0] = 1;
    }
    if (nextDirection == 2)
    {
      screen[8][0] = 1;
    }
  }
}

void copyScreen()
{
  gameProgress++;
  levelProgress++;
  for (y = 0;  screenMax > y ; y++)
  {
    for (x = 0 ; screenMax > x ; x++)
    {
      screenCopy[x][y] = screen[x][y];
    }
  }
}

void newGame()
{
  // Fill initial Screen
  for (x = 0; screenMax > x ; x++) // fill top
  {
    y = 1;
    screen[x][y] = 1;
  }
  for (x = 0; screenMax > x ; x++) // fill bottom
  {
    y = 8;
    screen[x][y] = 1;
  }
  for (y = 0; screenMax > y ; y++) // fill side
  {
    x = 1;
    screen[x][y] = 1;
  }

  //star cords
  for (i = 0; starNumber > i; i++)
  {
    starX[i] = rand() % 64 + 1; 
    starY[i] = rand() % 64 + 1;
    starType[i] = rand() % 3 + 1;
  } 
}

void drawBlocks()
{
  for (y = 0;  screenMax > y ; y++)
  {
    for (x = 0 ; screenMax > x ; x++)
    {
      if (screen[x][y] == 1)
      {
        if (blockType == 1)
        {
          Sprites::drawExternalMask((x*8+32-8)+offsetX, (y*8-8)+offsetY, block1, block1mask, 0,  0);
        }
        if (blockType == 2)
        {
          Sprites::drawExternalMask((x*8+32-8)+offsetX, (y*8-8)+offsetY, block2, block2mask, 0,  0);
        }
        if (blockType == 3)
        {
          Sprites::drawExternalMask((x*8+32-8)+offsetX, (y*8-8)+offsetY, block3, block3mask, 0,  0);
        }
        if (blockType == 4)
        {
          Sprites::drawExternalMask((x*8+32-8)+offsetX, (y*8-8)+offsetY, block4, block4mask, 0,  0);
        }
        if (blockType == 5)
        {
          Sprites::drawExternalMask((x*8+32-8)+offsetX, (y*8-8)+offsetY, block5, block5mask, 0,  0);
        }
      }
    }
  }
}

void drawStars()
{
  for (i = 0; starNumber > i; i++)
  {
  if (go == true)
  {
  if (anim3 == 3)
  {
  if (currentDirection == 1)
  {
    starX[i] = starX[i] - starType[i];
    if (starX[i] <= -1)
    {
      starX[i] = 63;
      starY[i] = rand() % 64;
    } 
  }
  if (currentDirection == 2)
  {
    starX[i] = starX[i] + starType[i];
    if (starX[i] >= 64)
    {
      starX[i] = 0;
      starY[i] = rand() % 64;
    }
  }
  if (currentDirection == 3)
  {
    starY[i] = starY[i] - starType[i];
    if (starY[i] <= -1)
    {
      starX[i] = rand() % 64 + 16;
      starY[i] = 63;
    }
  }
  if (currentDirection == 4)
  {
    starY[i]= starY[i] + starType[i];
    if (starY[i] >= 64)
    {
      starX[i] = rand() % 64 + 16;
      starY[i] = 0;
    }
  }
  }
  }
  arduboy.drawPixel(starX[i]+32, starY[i], 1);
  } 
}

void drawPlayer()
{
    if (arduboy.pressed(RIGHT_BUTTON))
    {
      if (playerX < 78)
      {
        playerX++;
      }
    }
    if (arduboy.pressed(LEFT_BUTTON))
    {
      if (playerX > 42)
      {
        playerX--;
      }
    }
    if (arduboy.pressed(DOWN_BUTTON))
    {
      if (playerY < 46)
      {
        playerY++;
      }
    }
    if (arduboy.pressed(UP_BUTTON))
    {
      if (playerY > 10)
      {
        playerY--;
      }
    }
    
  if (playerAlive == true)
  {
    if (go == true)
    {
      if (anim3 ==2)
      {
        spawnJet();
      }
    }

    if (arduboy.pressed(A_BUTTON) || arduboy.pressed(B_BUTTON))
    {
      spawnBullet();
    }

  if (currentDirection == 1)
  {
    if ( go == true)
    {
    if (anim3 == 3)
    {
    if (playerX > 42)
    {
      playerX--;
    }
    }
    }
    Sprites::drawExternalMask(playerX, playerY, player1, player1mask, 0,  0);
  }
  if (currentDirection == 2)
  {
    if ( go == true)
    {
    if (anim3 == 3)
    {
    if (playerX < 78)
    {
      playerX++;
    }
    }
    }
    Sprites::drawExternalMask(playerX, playerY, player2, player2mask, 0,  0);
  }
  if (currentDirection == 3)
  {
    if ( go == true)
    {
    if (anim3 == 3)
    {
    if (playerY > 10)
    {
      playerY--;
    }
    }
    }
    Sprites::drawExternalMask(playerX, playerY, player3, player3mask, 0,  0);
  }
  if (currentDirection == 4)
  {
    if ( go == true)
    {
    if (anim3 == 3)
    {
    if (playerY < 46)
    {
      playerY++;
    }
    }
    }
    Sprites::drawExternalMask(playerX, playerY, player4, player4mask, 0,  0);
  }
  }
}

void spawnBullet()
{
  for (i = 0; bulletNumber > i; i++)
  {
    if (bulletExist[i] == 0)
    {
      r = rand() % 12;
      if (r == 5)
      {
      if (s == true)
      {
        sound.tone(NOTE_E7,10);
      }
      bulletExist[i] = 25;
      bulletX[i] = playerX+3;
      bulletY[i] = playerY+3;
      if (currentDirection == 1)
      {
        bulletXvel[i] = 2;
        bulletYvel[i] = 0;
      }
      if (currentDirection == 2)
      {
        bulletXvel[i] = -2;
        bulletYvel[i] = 0;
      }
      if (currentDirection == 3)
      {
        bulletXvel[i] = 0;
        bulletYvel[i] = 2;
      }
      if (currentDirection == 4)
      {
        bulletXvel[i] = 0;
        bulletYvel[i] = -2;
      }
      }
    }
  }
}

void moveBullet()
{
  for (i = 0; bulletNumber > i; i++)
  {
    if (bulletExist[i] > 0)
    {
    bulletX[i] = bulletX[i] + bulletXvel[i];
    bulletY[i] = bulletY[i] + bulletYvel[i];
    bulletExist[i]--;
    //arduboy.drawPixel(debrisX[i], debrisY[i], 1);
    Sprites::drawExternalMask(bulletX[i], bulletY[i], debris, debrisMask, 0,  0);

    if (strikerExist > 0)
    {
      Rect strikerCol(strikerX, strikerY, 16, 16);
      Rect bulletCol(bulletX[i],bulletY[i], 2, 2);
      if (arduboy.collide(strikerCol, bulletCol))
      {
        strikerHealth--;
        if (s == true)
        {
          sound.tone(NOTE_C8, 5);
        }
        if (strikerHealth <= 0)
        {
          strikerExist = 0;
          xGet = strikerX + 4;
          yGet = strikerY + 4;
          enemyExplode();
          if (s == true)
          {
            sound.tone(NOTE_C2, 200);
          }
        }
      }
    }

    if (bossExist > 0)
    {
      Rect bossCol(bossX, bossY, 32, 32);
      Rect bulletCol(bulletX[i],bulletY[i], 2, 2);
      if (arduboy.collide(bossCol, bulletCol))
      {
        bossHealth--;
        if (s == true)
        {
          sound.tone(NOTE_C8, 5);
        }
        if (bossHealth <= 0)
        {
          bossExist = 0;
          xGet = bossX + 8;
          yGet = bossY + 8;
          enemyExplode();
          if (s == true)
          {
            sound.tone(NOTE_C2, 200);
          }
          grabData();
          go = true;
        }
      }
    }

    if (endExist > 0)
    {
      Rect endCol(endX, endY, 24, 24);
      Rect bulletCol(bulletX[i],bulletY[i], 2, 2);
      if (arduboy.collide(endCol, bulletCol))
      {
        endHealth--;
        if (s == true)
        {
          sound.tone(NOTE_C8, 5);
        }
        if (endHealth <= 0)
        {
          endExist = 0;
          xGet = endX + 6;
          yGet = endY + 6;
          enemyExplode();
          if (s == true)
          {
            sound.tone(NOTE_C2, 200);
          }
          winGame();
        }
      }
    }

    for (r = 0; enemyNumber > r ; r ++)
    {
      if (enemyExist[r] > 0)
      {
        Rect enemyCol(enemyX[r],enemyY[r], 8, 8);
        Rect bulletCol(bulletX[i],bulletY[i], 2, 2);
        if (arduboy.collide(enemyCol, bulletCol))
        {
          enemyExist[r] = 0;
          xGet = enemyX[r];
          yGet = enemyY[r];
          enemyExplode();

          if (s == true)
          {
            sound.tone(NOTE_C2, 200);
          }
        }
      }
    }
  }  
}
}

void spawnJet()
{
  for (i = 0; debrisNumber > i; i++)
  {
    if (debrisExist[i] == 0)
    {
      debrisExist[i] = rand() % 7 + 1;
      debrisX[i] = playerX+3;
      debrisY[i] = playerY+3;
      if (currentDirection == 1)
      {
        debrisXvel[i] = rand() % 2 - 3;
        debrisYvel[i] = rand() % 3-1;
      }
      if (currentDirection == 2)
      {
        debrisXvel[i] = rand() % 2 + 3;
        debrisYvel[i] = rand() % 3-1;
      }
      if (currentDirection == 3)
      {
        debrisXvel[i] = rand() % 3-1;
        debrisYvel[i] = rand() % 2 - 3;
      }
      if (currentDirection == 4)
      {
        debrisXvel[i] = rand() % 3-1;
        debrisYvel[i] = rand() % 2 + 3;
      }
    }
  }
}

void moveJet()
{
  for (i = 0; debrisNumber > i; i++)
  {
    if (debrisExist[i] > 0)
    {
    debrisX[i] = debrisX[i] + debrisXvel[i];
    debrisY[i] = debrisY[i] + debrisYvel[i];
    debrisExist[i]--;
    if (debrisExist[i] < 1)
    {
      Sprites::drawExternalMask(debrisX[i], debrisY[i], debris, debrisMask, 0,  0);
    }
    else
    {
      arduboy.drawPixel(debrisX[i], debrisY[i], 1);
    }
    }
  }  
}

void drawHUD()
{
  Sprites::drawExternalMask(0, 0, leftSide, sideMask, 0,  0);
  Sprites::drawExternalMask(96, 0, rightSide, sideMask, 0,  0);
  //arduboy.drawRect(32, 0, 64, 64, 1);

  //arduboy.drawRect(18, 6, 5, 52, 1);
  gameProgressBar = (5000 - gameProgress)/100;
  arduboy.fillRect(19, 7+gameProgressBar, 3, 50-gameProgressBar, 1);

  //arduboy.drawRect(10, 6, 5, 52, 1);
  levelProgressBar = (500 - levelProgress)/10;
  arduboy.fillRect(10, 7+levelProgressBar, 3, 50-levelProgressBar, 1);

  if (lives > 3)
  {
    Sprites::drawExternalMask(108, 13, player1, player1mask, 0,  0);
  }
  if (lives > 2)
  {
    Sprites::drawExternalMask(108, 23, player2, player2mask, 0,  0);
  }
  if (lives > 1)
  {
    Sprites::drawExternalMask(108, 33, player1, player1mask, 0,  0);
  }
  if (lives > 0)
  {
    Sprites::drawExternalMask(108, 43, player2, player2mask, 0,  0);
  }
}

void resetVariables()
{
start = false;
go = true;
//anim9 = 0;
//anim2 = 0;
//anim3 = 0;
gameProgress = 0;
gameProgressBar = 0;
levelProgress = 0;
levelProgressBar = 0;
level = 1;
corners = 500;
dataReader = 0;
winDelay = 0;

// player variables
playerAlive = true;
//c = 0; // death countdown
playerX = 60;
playerY = 28;
lives = 4;
score = 0;
currentDirection = 1;

// enemy variables
enemyRate = 15; // spawn rate (lower more)

bossExist = 0;
endExist = 0;
strikerExist = 0;

for (i = 0; brickNumber > i ; i++)
{
  brickExist[i] = 0;
}

// block scrolling variables
blockType = 1;
offsetX = 0;
offsetY = 0;

// level path variablescurrentDirection = 1; // 1 Left, 2 Right, 3 Down, 4 Up
nextDirection = 3;
sectionLength = 24;

// star variables

  for (y = 0;  screenMax > y ; y++)
  {
    for (x = 0 ; screenMax > x ; x++)
    {
      screen[x][y] = 0;
    }
  }
}

//    if (currentDirection == 1)
//    {

//    }
//    if (currentDirection == 2)
//    {

//    }
//    if (currentDirection == 3)
//    {

//    }
//    if (currentDirection == 4)
//    {

//    }